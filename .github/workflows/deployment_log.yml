name: Deployment Log Workflow

on:
    workflow_call:
        inputs:
            DEPLOYMENT_STATE:
                description: 'Deployment state (DEPLOY_STARTED, DEPLOY_COMPLETED, DEPLOY_FAILED)'
                required: true
                type: string
            DEPLOYMENT_TOOL:
                description: 'Deployment tool (STRATUS, CLARITY, OCTOPUS)'
                required: true
                type: string
            DEPLOYMENT_ENVIRONMENT:
                description: 'Deployment environment (DEVELOPMENT, STAGING, PRODUCTION)'
                required: true
                type: string
            TENANT:
                description: 'Tenant (NDC, A0T)'
                required: true
                type: string
        secrets:
            DEPLOYMENTS_PAT:
                required: true

jobs:
    write_log:
        runs-on: ubuntu-latest

        steps:
            - name: Validate DEPLOYMENT_STATE Input
              run: |
                 if [[ ! " DEPLOY_STARTED DEPLOY_COMPLETED DEPLOY_FAILED " =~ " ${{ inputs.DEPLOYMENT_STATE }} " ]]; then
                     echo "Error: Invalid DEPLOYMENT_STATE value. Allowed values are DEPLOY_STARTED, DEPLOY_COMPLETED, DEPLOY_FAILED."
                     exit 1
                 fi
              shell: bash

            - name: Validate DEPLOYMENT_TOOL Input
              run: |
                  if [[ ! " STRATUS CLARITY OCTOPUS " =~ " ${{ inputs.DEPLOYMENT_TOOL }} " ]]; then
                      echo "Error: Invalid DEPLOYMENT_STATE value. Allowed values are STRATUS, CLARITY, OCTOPUS."
                      exit 1
                  fi
              shell: bash

            - name: Validate DEPLOYMENT_ENVIRONMENT Input
              run: |
                  if [[ ! " DEVELOPMENT STAGING PRODUCTION " =~ " ${{ inputs.DEPLOYMENT_ENVIRONMENT }} " ]]; then
                      echo "Error: Invalid DEPLOYMENT_STATE value. Allowed values are DEVELOPMENT, STAGING, PRODUCTION."
                      exit 1
                  fi
              shell: bash
              
            - name: Validate TENANT Input
              run: |
                  if [[ ! " NDC A0T " =~ " ${{ inputs.TENANT }} " ]]; then
                      echo "Error: Invalid DEPLOYMENT_STATE value. Allowed values are NDC, A0T."
                      exit 1
                  fi
              shell: bash

            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  repository: cw-b/Deployments
                  token: ${{ secrets.DEPLOYMENTS_PAT }}

            - name: Define Log File Vars
              run: |
                  DEPLOYMENT_REPO=$(basename "${{ github.repository }}")
                  LOG_FILE_DIR="$(date -u +"%Y/%m/%d")/$DEPLOYMENT_REPO/${{ inputs.TENANT }}"
                  echo "DEPLOYMENT_REPO=$DEPLOYMENT_REPO" >> $GITHUB_ENV
                  echo "LOG_FILE_DIR=$LOG_FILE_DIR" >> $GITHUB_ENV
                  echo "LOG_FILE_NAME=$LOG_FILE_DIR/${{ inputs.DEPLOYMENT_ENVIRONMENT }}.log" >> $GITHUB_ENV
                  echo $LOG_FILE_NAME

            - name: Create Log File Directory
              run: |
                  mkdir -p "$LOG_FILE_DIR"

            - name: Append to log
              run: |
                  DEPLOYMENT_TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                  echo "{\"DEPLOYMENT_STATE\": \"${{ inputs.DEPLOYMENT_STATE }}\", \"TS\": \"$DEPLOYMENT_TS\", \"DEPLOYMENT_TOOL\": \"${{ inputs.DEPLOYMENT_TOOL }}\", \"DEPLOYMENT_ENVIRONMENT\": \"${{ inputs.DEPLOYMENT_ENVIRONMENT }}\", \"TENANT\": \"${{ inputs.TENANT }}\", \"ACTOR\": \"${{ github.actor }}\", \"RUN_ID\": \"${{ github.run_id }}\", \"REPO\": \"$DEPLOYMENT_REPO\", \"SHA\": \"${{ github.sha }}\"}" >> $LOG_FILE_NAME

            - name: Configure Git
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"

            - name: Commit changes
              run: |
                  git add .
                  git commit -m "Logging deployment state of ${{ inputs.DEPLOYMENT_STATE }} to ${{ inputs.DEPLOYMENT_ENVIRONMENT }} on ${{ inputs.TENANT }} for ${{ github.repository }}"

            - name: Push changes
              env:
                  GITHUB_TOKEN: ${{ secrets.DEPLOYMENTS_PAT }}
              run: |
                  git push origin main
